{"ast":null,"code":"import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","map":{"version":3,"names":["toDate","startOfUTCISOWeek","startOfUTCISOWeekYear","MILLISECONDS_IN_WEEK","getUTCISOWeek","dirtyDate","arguments","length","TypeError","date","diff","getTime","Math","round"],"sources":["/Users/ummu/Downloads/expense-2/app/node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js"],"sourcesContent":["import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}"],"mappings":"AAAA,OAAOA,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,iBAAiB,MAAM,+BAA+B;AAC7D,OAAOC,qBAAqB,MAAM,mCAAmC;AACrE,IAAIC,oBAAoB,GAAG,SAAS,CAAC,CAAC;AACtC;;AAEA,eAAe,SAASC,aAAaA,CAACC,SAAS,EAAE;EAC/C,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;IACxB,MAAM,IAAIC,SAAS,CAAC,gCAAgC,GAAGF,SAAS,CAACC,MAAM,GAAG,UAAU,CAAC;EACvF;EAEA,IAAIE,IAAI,GAAGT,MAAM,CAACK,SAAS,CAAC;EAC5B,IAAIK,IAAI,GAAGT,iBAAiB,CAACQ,IAAI,CAAC,CAACE,OAAO,CAAC,CAAC,GAAGT,qBAAqB,CAACO,IAAI,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;EACtF;EACA;;EAEA,OAAOC,IAAI,CAACC,KAAK,CAACH,IAAI,GAAGP,oBAAoB,CAAC,GAAG,CAAC;AACpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}